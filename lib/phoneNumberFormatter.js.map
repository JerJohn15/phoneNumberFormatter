{
  "version": 3,
  "sources": [
    "phoneNumberFormatter.js"
  ],
  "names": [
    "formatForPhone_",
    "phone",
    "defaultPrefix",
    "indexOf",
    "replace",
    "bestFormat",
    "precision",
    "Object",
    "entries",
    "prefix",
    "format",
    "length",
    "substring",
    "k",
    "v",
    "prefixesAreSubsets_",
    "prefixA",
    "prefixB",
    "formattedPhoneNumber_",
    "lastChar",
    "formattedPhone",
    "formatDigitCount",
    "phoneDigits",
    "prefixPhoneFormat",
    "phonePrefix",
    "phoneFormat",
    "Math",
    "min",
    "nationalPrefix",
    "Shopify",
    "range",
    "from",
    "to",
    "inclusive",
    "i",
    "match",
    "formatChar",
    "isEventAllowed_",
    "e",
    "metaKey",
    "which",
    "isEventAllowedChar_",
    "char",
    "String",
    "fromCharCode",
    "Boolean",
    "test",
    "restrictEventAndFormat_",
    "preventDefault",
    "value",
    "val",
    "caretEnd",
    "get",
    "selectionEnd",
    "caretPosition_",
    "call",
    "format_",
    "formatUp_",
    "checkForCountryChange_",
    "keyCode",
    "formatBack_",
    "meta",
    "formattedPhone_",
    "selectionAtEnd",
    "selection",
    "textBeforeCaret",
    "slice",
    "getNewCaretPosition_",
    "setCaretPosition_",
    "data",
    "country",
    "trigger",
    "caretPosition",
    "isNaN",
    "split",
    "selectionStart",
    "position",
    "setSelectionRange",
    "browserNotSupported",
    "document",
    "createElement",
    "mobilePhoneNumber",
    "init",
    "options",
    "ref",
    "bind",
    "apply",
    "allowPhoneWithoutPrefix",
    "validate",
    "countryCode",
    "mobilePhoneNumberPrefixFromCountryCode",
    "fn",
    "method",
    "args",
    "formatMobilePhoneNumber",
    "toLowerCase"
  ],
  "mappings": "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",
  "file": "phoneNumberFormatter.js",
  "sourceRoot": "../src",
  "sourcesContent": [
    "import $ from 'jquery';\nimport formats from 'formats';\n\nfunction formatForPhone_(phone, defaultPrefix = null) {\n  if (phone.indexOf('+') !== 0 && defaultPrefix) {\n    phone = defaultPrefix + phone.replace(/[^0-9]/g, '');\n  } else {\n    phone = `+${phone.replace(/[^0-9]/g, '')}`;\n  }\n\n  let bestFormat = null;\n  let precision = 0;\n\n  for (const [prefix, format] of Object.entries(formats || {})) {\n    if (phone.length >= prefix.length && phone.substring(0, prefix.length) === prefix && prefix.length > precision) {\n      bestFormat = {};\n\n      for (const [k, v] of Object.entries(format || {})) {\n        bestFormat[k] = v;\n      }\n\n      bestFormat.prefix = prefix;\n      precision = prefix.length;\n    }\n  }\n\n  return bestFormat;\n}\n\nfunction prefixesAreSubsets_(prefixA, prefixB) {\n  if (prefixA === prefixB) {\n    return true;\n  }\n\n  if (prefixA.length < prefixB.length) {\n    return prefixB.substring(0, prefixA.length) === prefixA;\n  }\n\n  return prefixA.substring(0, prefixB.length) === prefixB;\n}\n\nfunction formattedPhoneNumber_(phone, lastChar, defaultPrefix = null) {\n  let formattedPhone;\n  let formatDigitCount;\n  let phoneDigits;\n  let prefixPhoneFormat;\n  let phonePrefix;\n  let phoneFormat;\n  let format;\n\n  if (phone.length !== 0 && (phone.substring(0, 1) === '+' || defaultPrefix)) {\n    format = formatForPhone_(phone, defaultPrefix);\n\n    if (format && format.format) {\n      phoneFormat = format.format;\n      phonePrefix = format.prefix;\n\n      if (defaultPrefix) {\n        if ((defaultPrefix === phonePrefix || prefixesAreSubsets_(phonePrefix, defaultPrefix)) && (phone.indexOf('+') !== 0 || phone.length === 0)) {\n          phoneFormat = phoneFormat.substring(Math.min(phonePrefix.length, defaultPrefix.length) + 1);\n\n          if (format.nationalPrefix != null) {\n            prefixPhoneFormat = '';\n\n            for (const i of Shopify.range({\n              from: 0,\n              to: format.nationalPrefix.length,\n              inclusive: false,\n            })) {\n              prefixPhoneFormat += '.';\n            }\n\n            phoneFormat = prefixPhoneFormat + phoneFormat;\n          }\n        }\n      }\n\n      if (phone.substring(0, 1) === '+') {\n        phoneDigits = phone.substring(1);\n      } else {\n        phoneDigits = phone;\n      }\n\n      formatDigitCount = phoneFormat.match(/\\./g).length;\n      formattedPhone = '';\n\n      for (const formatChar of phoneFormat) {\n        if (formatChar === '.') {\n          if (phoneDigits.length === 0) {\n            break;\n          }\n\n          formattedPhone += phoneDigits.substring(0, 1);\n          phoneDigits = phoneDigits.substring(1);\n        } else if (lastChar || phoneDigits.length > 0) {\n          formattedPhone += formatChar;\n        }\n      }\n\n      phone = formattedPhone + phoneDigits;\n    }\n  }\n\n  return phone;\n}\n\nfunction isEventAllowed_(e) {\n  if (e.metaKey) {\n    return true;\n  }\n\n  if (e.which === 32) {\n    return false;\n  }\n\n  if (e.which === 0) {\n    return true;\n  }\n\n  if (e.which < 33) {\n    return true;\n  }\n\n  return isEventAllowedChar_(e);\n}\n\nvar isEventAllowedChar_ = e => {\n  const char = String.fromCharCode(e.which);\n  return Boolean(/[\\d\\s+]/.test(char));\n};\n\nfunction restrictEventAndFormat_(e) {\n  if (!isEventAllowed_(e)) {\n    e.preventDefault();\n    return;\n  }\n\n  if (!isEventAllowedChar_(e)) {\n    return;\n  }\n\n  let value = this.val();\n  const caretEnd = this.get(0).selectionEnd;\n  value = value.substring(0, caretPosition_.call(this)) + String.fromCharCode(e.which) + value.substring(caretEnd, value.length);\n  return format_.call(this, value, e);\n}\n\nfunction formatUp_(e) {\n  checkForCountryChange_.call(this);\n  const value = this.val();\n\n  if (e.keyCode === 8 && caretPosition_.call(this) === value.length) {\n    return;\n  }\n\n  return format_.call(this, value, e);\n}\n\nfunction formatBack_(e) {\n  if (!e) {\n    return;\n  }\n\n  if (e.meta) {\n    return;\n  }\n\n  let value = this.val();\n\n  if (value.length === 0) {\n    return;\n  }\n\n  if (!(caretPosition_.call(this) === value.length)) {\n    return;\n  }\n\n  if (e.keyCode !== 8) {\n    return;\n  }\n\n  value = value.substring(0, value.length - 1);\n  e.preventDefault();\n  const phone = formattedPhone_.call(this, value, false);\n\n  if (this.val() !== phone) {\n    return this.val(phone);\n  }\n}\n\nvar format_ = function(value, e) {\n  let selectionAtEnd;\n  let selection;\n  let textBeforeCaret;\n  const phone = formattedPhone_.call(this, value, true);\n\n  if (phone !== this.val()) {\n    textBeforeCaret = value.slice(0, caretPosition_.call(this) + 1).replace(/\\D+/g, '');\n    e.preventDefault();\n    this.val(phone);\n    selection = getNewCaretPosition_.call(this, textBeforeCaret);\n    selectionAtEnd = selection === this.val().length;\n\n    if (!selectionAtEnd) {\n      return setCaretPosition_.call(this, selection);\n    }\n  }\n};\n\nvar formattedPhone_ = function(phone, lastChar) {\n  if (phone.indexOf('+') !== 0 && this.data('defaultPrefix')) {\n    phone = phone.replace(/[^0-9]/g, '');\n  } else {\n    phone = `+${phone.replace(/[^0-9]/g, '')}`;\n  }\n\n  return formattedPhoneNumber_(phone, lastChar, this.data('defaultPrefix'));\n};\n\nvar checkForCountryChange_ = function() {\n  const phone = this.val();\n  const format = formatForPhone_(phone, this.data('defaultPrefix'));\n  let country = null;\n\n  if (format) {\n    country = format.country;\n  }\n\n  if (this.data('mobilePhoneCountry') !== country) {\n    this.data('mobilePhoneCountry', country);\n    return this.trigger('country.mobilePhoneNumber', country);\n  }\n};\n\nvar getNewCaretPosition_ = function(textBeforeCaret) {\n  if (!textBeforeCaret) {\n    return this.val().length;\n  }\n\n  let caretPosition = 0;\n\n  for (const char of this.val()) {\n    if (!textBeforeCaret) {\n      break;\n    }\n\n    if (char === textBeforeCaret[0]) {\n      textBeforeCaret = textBeforeCaret.substring(1);\n    }\n\n    caretPosition++;\n  }\n\n  if (isNaN(this.val().slice(caretPosition, caretPosition + 1))) {\n    return caretPosition + this.val().slice(caretPosition).split(/\\d/)[0].length;\n  }\n\n  return caretPosition;\n};\n\nvar caretPosition_ = function() {\n  return this[0].selectionStart;\n};\n\nvar setCaretPosition_ = function(position) {\n  return this[0].setSelectionRange(position, position);\n};\n\nfunction browserNotSupported() {\n  if (!'selectionStart' in document.createElement('input')) {\n    return true;\n  }\n\n  return false;\n}\n\nconst mobilePhoneNumber = {};\n\nmobilePhoneNumber.init = function(options = {}) {\n  let ref;\n\n  if (browserNotSupported()) {\n    return;\n  }\n\n  if (!this.data('mobilePhoneNumberInited')) {\n    this.data('mobilePhoneNumberInited', true);\n\n    this.bind('keypress', () => restrictEventAndFormat_.apply($(this), arguments));\n\n    this.bind('keyup', () => formatUp_.apply($(this), arguments));\n\n    this.bind('keydown', () => formatBack_.apply($(this), arguments));\n  }\n\n  this.data('defaultPrefix', (ref = options.allowPhoneWithoutPrefix) != null ? ref : options.defaultPrefix);\n\n  if (this.val() !== '') {\n    this.val(formattedPhone_.call(this, this.val(), false));\n  }\n\n  return this;\n};\n\nmobilePhoneNumber.val = function() {\n  const val = this.val().replace(/[^0-9]/g, '');\n  const format = formatForPhone_(val, this.data('defaultPrefix'));\n\n  if (this.val().indexOf('+') === 0 || !(this.data('defaultPrefix') != null)) {\n    return `+${val}`;\n  } else {\n    return this.data('defaultPrefix') + val;\n  }\n};\n\nmobilePhoneNumber.validate = function() {\n  const val = this.mobilePhoneNumber('val');\n  const format = formatForPhone_(val, this.data('defaultPrefix'));\n\n  if (!format) {\n    return true;\n  }\n\n  return val.length > format.prefix.length;\n};\n\nmobilePhoneNumber.country = function() {\n  const format = formatForPhone_(this.mobilePhoneNumber('val'));\n\n  if (format) {\n    return format.country;\n  }\n};\n\nmobilePhoneNumber.prefix = function() {\n  const countryCode = this.mobilePhoneNumber('country');\n\n  if (!(countryCode != null)) {\n    return '';\n  }\n\n  return $.mobilePhoneNumberPrefixFromCountryCode(countryCode);\n};\n\n$.fn.mobilePhoneNumber = function(method, ...args) {\n  var args;\n\n  if (!(typeof method !== 'undefined' && method !== null) || !(typeof (method) === 'string')) {\n    if (method != null) {\n      args = [method];\n    }\n\n    method = 'init';\n  }\n\n  return mobilePhoneNumber[method].apply(this, args);\n};\n\n$.formatMobilePhoneNumber = phone => {\n  phone = `+${phone.replace(/[^0-9\\*]/g, '')}`;\n  return formattedPhoneNumber_(phone, true);\n};\n\n$.mobilePhoneNumberPrefixFromCountryCode = countryCode => {\n  for (const [prefix, format] of Object.entries(formats || {})) {\n    if (format.country.toLowerCase() === countryCode.toLowerCase()) {\n      if (prefix.length === 5 && prefix[1] === '1') {\n        return '+1';\n      }\n\n      return prefix;\n    }\n  }\n\n  return null;\n};\n"
  ]
}
